<link rel="stylesheet" href="/styles/sellerCss/searchBox.css">
<div class="pageName"><h2><%= pageTitle %></h2></div>
<div class="searchBar">
    <div class="searchText">Search Here</div>
    <div class="searchBox">
        <input type="text" class="searchInput">
        <input type="hidden" class="medicineId" value="">
        <div class="suggestionBox suggestionBox-hidden"></div>
    </div>
    <div class="buttonHolderSearchBox">
        <% if (button!='Seller/addProductPage') { %>
            <button class="searchBtn buttonCss" type="button">Search</button>
        <% }else{ %> 
            <button class="addBtn buttonCss" type="button">Add</button>
        <%}%>
    </div>
</div>
<script>
    // this is common js for any page which uses searchBox
    const searchInputField = document.querySelector('.searchInput');
    const suggesstions = document.querySelector('.suggestionBox');
    const medicineIdValue = document.querySelector('.medicineId');

    searchInputField.addEventListener('input',async(e)=>{
        const val = String(searchInputField.value);
        // storage key for localstorage to retrieve or update data
        const keyName = '<%= localStorageKey.suggestions %>';
        // retreives data from lcoalstorage for key
        const suggesstionList = JSON.parse(localStorage.getItem(keyName));
        //filters data according to searchInput Data
        let desiredSuggesstionList = suggesstionList.filter(item=>String(item?.name).toLowerCase().includes(val.toLowerCase())).sort((a,b)=> a.name.localeCompare(b.name));
            // String(item?.name).toLowerCase().includes(val.toLowerCase())).sort((a,b)=> a-b);
        if(desiredSuggesstionList.length<5){
            // make a api call to fetch and store data in local storage
            const response = await fetch('<%= url %>utils/searchProduct',{
                method:'POST',
                headers : { 'Content-Type': 'application/json' },
                body:JSON.stringify({
                    medicineName: val,
                }),
            });
            const result = await response.json();
            if(!result.success){
                message.textContent = result.message;
                message.classList.remove('message-hidden');
                setTimeout(()=>{
                    message.classList.add('message-hidden');
                },3000);
                return;
            }
            localStorage.setItem(keyName,JSON.stringify(result.data));
            //sorted data
            desiredSuggesstionList =  result.data.filter(item => String(item.name).toLowerCase().includes(val.toLowerCase())).sort((a,b)=> a.name.localeCompare(b.name));
        }
        // show 10 data to the UI
        suggesstions.classList.remove('suggestionBox-hidden');
        suggesstions.innerHTML = '';
        const maxIteration = desiredSuggesstionList.length>10 ? 10 : desiredSuggesstionList.length;
        for(let i=0; i<maxIteration; i++){
            const option = document.createElement('option');
            option.textContent = desiredSuggesstionList[i].name;
            option.value = desiredSuggesstionList[i].productId;
            option.classList.add('optionField');
            option.dataset.navigateoption = i;
            suggesstions.appendChild(option);
        }
    });
    // copy suggestion text to input field
    suggesstions.addEventListener('click',(e)=>{
        searchInputField.value = e.target.textContent;
        medicineIdValue.value = e.target.value;
        suggesstions.classList.add('suggestionBox-hidden');
    });
    // show suggesstionBox if you click on input field to reselect option
    searchInputField.addEventListener('click',(e)=>{
        suggesstions.classList.remove('suggestionBox-hidden');
    });
    // hide suggesstion when clicked outside it
    window.addEventListener('click',(e)=>{
        if(e.target.getAttribute('class')!='searchInput' && e.target.getAttribute('class')!='optionField'){
            suggesstions.classList.add('suggestionBox-hidden');
        }
    })
</script>